apiVersion: smith.atlassian.com/v1
kind: Bundle
metadata:
  name: sampleapp
spec:
  resources:

  - name: instance1
    spec:
      apiVersion: servicecatalog.k8s.io/v1beta1
      kind: ServiceInstance
      metadata:
        name: instance1
      spec:
        serviceClassName: user-provided-service
        planName: default
        parameters:
          credentials:
            token: token

  - name: binding1
    references:
    - name: instance1-metadata-name
      resource: instance1
      path: metadata.name
    spec:
      apiVersion: servicecatalog.k8s.io/v1beta1
      kind: ServiceBinding
      metadata:
        name: binding1
      spec:
        instanceRef:
          name: "!{instance1-metadata-name}"
        secretName: secret1

  - name: binding2
    references:
    - name: instance1-metadata-name
      resource: instance1
      path: metadata.name
    spec:
      apiVersion: servicecatalog.k8s.io/v1beta1
      kind: ServiceBinding
      metadata:
        name: binding2
      spec:
        instanceRef:
          name: "!{instance1-metadata-name}"
        secretName: secret2

  - name: podpreset1
    references:
    - name: binding1-secretName
      resource: binding1
      path: spec.secretName
    - name: binding2-secretName
      resource: binding2
      path: spec.secretName
    spec:
      apiVersion: settings.k8s.io/v1alpha1
      kind: PodPreset
      metadata:
        name: podpreset1
      spec:
        selector:
          matchLabels:
            role: app
        envFrom:
        - prefix: BINDING1_
          secretRef:
            name: "!{binding1-secretName}"
        - prefix: BINDING2_
          secretRef:
            name: "!{binding2-secretName}"

  - name: deployment1
    references:
    - name: podpreset1-matchLabels
      resource: podpreset1
      path: spec.selector.matchLabels
    spec:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        name: deployment1
      spec:
        replicas: 2
        template:
          metadata:
            labels: "!{podpreset1-matchLabels}"
          spec:
            containers:
            - name: nginx
              image: nginx:latest
              ports:
              - containerPort: 80

  - name: service1
    references:
    - name: deployment1-labels
      resource: deployment1
      path: spec.template.metadata.labels
    spec:
      apiVersion: v1
      kind: Service
      metadata:
        name: service1
      spec:
        ports:
        - port: 80
          protocol: TCP
          targetPort: 80
          nodePort: 30090
        selector: "!{deployment1-labels}"
        type: NodePort

  - name: ingress1
    references:
    - name: service1-metadata-name
      resource: service1
      path: metadata.name
    - name: service1-port
      resource: service1
      path: spec.ports[?(@.protocol=="TCP")].port
    spec:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        name: ingress1
      spec:
        rules:
        - http:
            paths:
            - path: /
              backend:
                serviceName: "!{service1-metadata-name}"
                servicePort: "!{service1-port}"
